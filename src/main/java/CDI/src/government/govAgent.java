/*


 * 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CDI.src.government;

import java.util.*;

import ec.util.MersenneTwisterFast;
import CDI.src.environment.Cell;
import sim.engine.SimState;
import sim.engine.Steppable;
import sim.util.DoubleBag;
import CDI.src.movement.parameters.*;
import CDI.src.movement.Household;
import CDI.src.movement.NorthLandsMovement;

/**
 *
 * @author Bill, Peter
 */
public class govAgent implements Cloneable, Steppable 
{
    //NorthLandsMovement model;
    ArrayList<Cell> taxedCells;   // source of revenues, occupied cells
    
    double federalAssets=0; //assets accumulated by fed govt only
    double federalRevenues; //revenue generated by fed govt only

    double totalAssets; // total assets accumulated by fed and local govts
    double totalRevenues;  //total revenue generated by fed and local govts
    
    double federalOperatingBudget;
    double thisYearsBudget;
    double federalExpenses;
    
    HashMap<Cell,Double> totalWealths = new HashMap<Cell,Double>();

//    govIssues;   // 

    public govAgent(NorthLandsMovement model, ArrayList<Cell> taxedCells)
    {
        this.taxedCells = taxedCells;
        //this.model = model;
    }
    
    public double getFederalRevenues() { return federalRevenues; }

    public double getFederalAssets() { return federalAssets; }

    // For now, I'll just collect information about taxes, but no money changes hands.
    private void collectTaxes(NorthLandsMovement model)
    {	
    	federalRevenues = 0.0;
        totalRevenues = 0.0;
        totalAssets = 0.0;   	
    	
    	totalWealths = new HashMap<Cell,Double>();
		
		for(Household household:model.households)
		{
			double currentWealth = totalWealths.get(household.getCurrentCell())==null?0:totalWealths.get(household.getCurrentCell());
			totalWealths.put(household.getCurrentCell(),currentWealth+household.wealth);
			household.wealth=(1-household.getCurrentCell().infrastructureTax-model.parameters.migrationTaxRate)*household.wealth;
		}
		
		for (Cell cell:model.map.canadaCells) 
        {
			if (totalWealths.containsKey(cell))
            {
                cell.taxRevenue=cell.infrastructureTax*totalWealths.get(cell);
                cell.netAssets+=cell.taxRevenue;
                this.totalRevenues+=cell.taxRevenue;
                this.totalAssets+=cell.netAssets;
                this.federalRevenues+=model.parameters.migrationTaxRate*totalWealths.get(cell);
			}
		}
    	    	
		this.federalOperatingBudget=(1-model.parameters.govPctSavings)*this.federalRevenues;
		this.thisYearsBudget=this.federalOperatingBudget;
		
		this.federalAssets+=model.parameters.govPctSavings*this.federalRevenues;
		this.totalRevenues+=this.federalRevenues;
		this.totalAssets+=this.federalAssets;
    }
       
    public void subsidizeHouseholds(NorthLandsMovement model, int mode) 
    {	
    	this.federalExpenses=0;
    	
    	TreeMap<Double,ArrayList<Household>> satisfactionToHouseholdMap = model.getSatisfactionToHouseholdMap(mode);
    	
    	for (double satisfaction : satisfactionToHouseholdMap.keySet()) 
        {
    		for (int i=0; i<satisfactionToHouseholdMap.get(satisfaction).size();i++) 
            {   			
    			if (satisfaction > model.parameters.householdSubsidyThreshold) 
                {
    				this.federalAssets+=this.federalOperatingBudget;
    				this.totalAssets+=this.federalOperatingBudget;
    				this.federalOperatingBudget=0;
    				return;
    			}
    			
    			Household h = satisfactionToHouseholdMap.get(satisfaction).get(i);
    			if (h.getTrapped()) 
                {
	    			h.wealth+=model.parameters.householdSubsidy;
	    			this.federalExpenses+=model.parameters.householdSubsidy;
	    			this.federalOperatingBudget-=model.parameters.householdSubsidy;
    			}
    			if (federalOperatingBudget < model.parameters.householdSubsidy) 
                {
    				this.federalAssets+=this.federalOperatingBudget;
    				this.totalAssets+=this.federalOperatingBudget;
    				this.federalOperatingBudget=0;
    				return;
    			}
    		}
    	}
    	
    	if (this.federalOperatingBudget>0) 
        {
    		this.federalAssets+=this.federalOperatingBudget;
			this.totalAssets+=this.federalOperatingBudget;
			this.federalOperatingBudget=0;
			return;
    	}  	 
    }
    
   /** 
    public void subsidizeLocalInfrastructure(NorthLandsMovement model, int mode) {
		
    	this.federalExpenses=0;
    	
    	TreeMap<Double,ArrayList<Cell>> assetsToCellsMap = model.getAssetsToCellsMap(mode);
    	
    	for (double assets : assetsToCellsMap.keySet()) {
    		for (int i=0; i<assetsToCellsMap.get(assets).size();i++) {
    			if (assets>=0) {
    				this.federalAssets+=this.federalOperatingBudget;
    				this.totalAssets+=this.federalOperatingBudget;
    				this.federalOperatingBudget=0;
    				return;
    			}
    			
    			Cell cell = assetsToCellsMap.get(assets).get(i);
    			cell.netAssets+=model.parameters.infrastructureSubsidy;
    			this.federalExpenses+=model.parameters.infrastructureSubsidy;
    			this.federalOperatingBudget-=model.parameters.infrastructureSubsidy;
    			
    			if (federalOperatingBudget<model.parameters.infrastructureSubsidy) {
    				this.federalAssets+=this.federalOperatingBudget;
    				this.totalAssets+=this.federalOperatingBudget;
    				this.federalOperatingBudget=0;
    				return;
    			}
    		}
    	}
    	
	}
    */
    
    public  void adjustMigrationTax(NorthLandsMovement model)
    {
    	if ((model.schedule.getTime()-1911) % 1 == 0) 
        {
	    	double currentRate = model.parameters.migrationTaxRate;
	    	double targetRevenue;
	    	if (currentRate == 0) { currentRate = 0.000001; }
	    	if (model.parameters.subsidizeRuralOnly) 
            {
	    		targetRevenue = model.collector.getTrappedRural() 
                                * model.parameters.householdSubsidy;	
	    	}
	    	else if (model.parameters.subsidizeUrbanOnly) 
            {
	    		targetRevenue = model.collector.getTrappedUrban()
                                * model.parameters.householdSubsidy;
	    	}
	    	else 
            {
	    		targetRevenue = (model.collector.getTrappedRural()+model.collector.getTrappedUrban())*model.parameters.householdSubsidy;
	    	}
	    	
	        model.parameters.migrationTaxRate = targetRevenue/(model.collector.getTotalRuralWealth()+model.collector.getTotalUrbanWealth());
	        System.out.printf("migration tax: %f", model.parameters.migrationTaxRate);
    	}
    }


    public  void adjustInfrastructureTax(NorthLandsMovement model)
    {	
    	for (Cell cell:model.map.canadaCells) 
        {
    		if ((model.schedule.getTime()-1911) % 1 == 0 && totalWealths.containsKey(cell)) 
            {
    			if (cell.netAssets<0)
                {
	    			cell.infrastructureTax=Math.abs(cell.netAssets)/totalWealths.get(cell);
	    			if (cell.infrastructureTax>0.2) { cell.infrastructureTax=0.2; }
    			}
    			else 
                { 	cell.infrastructureTax=cell.infrastructureTax/2; }
    		}
    	}
    }
    
    @Override
    public void step(SimState state) 
    {
    	NorthLandsMovement model = (NorthLandsMovement) state;
        double t = state.schedule.getTime();
        collectTaxes(model); 
        
        model.collector.setFederalRevenues(federalRevenues);
        model.collector.setFederalAssets(federalAssets);
        model.collector.setTotalRevenues(totalRevenues);
        model.collector.setTotalAssets(totalAssets);
        model.collector.setFederalExpenses(federalExpenses);
        
        if (model.schedule.getTime() >= model.parameters.beginMigrationTax) 
        {
        	adjustMigrationTax(model);
        	//decide what to subsidize:
            if (model.parameters.subsidizeUrbanOnly) 
            {  subsidizeHouseholds(model,0); }
            else if (model.parameters.subsidizeRuralOnly) 
                    {	subsidizeHouseholds(model,1); }
                 else { subsidizeHouseholds(model,-1); }
        }
        
        if (model.schedule.getTime() >= model.parameters.beginInfrastructureTax) 
        {  adjustInfrastructureTax(model); }
        
        if ((model.schedule.getTime()-1911) % 1 == 0) 
        {
    		model.parameters.moveCost=model.parameters.moveCost+model.parameters.moveCost*(model.parameters.wealthAdjMu+model.parameters.wealthAdjSigma*model.random.nextGaussian());
    		model.parameters.infrastructureBaseCost=model.parameters.infrastructureBaseCost+model.parameters.infrastructureBaseCost*(model.parameters.wealthAdjMu+model.parameters.wealthAdjSigma*model.random.nextGaussian());
    		model.parameters.householdSubsidy=model.parameters.moveCost*Math.log(100);
        }
        
        if ((t-1911) % 5 == 0)  // print every 10 years 
           System.out.printf("govAgent>step> %8.2f:  Urban pop: %,d,  Rural pop: %,d%n", 
                t, model.urbanResidence, model.ruralResidence);
        System.out.printf("govAgent>step> %8.2f: Total revenues = $%,.2f, total assets = $%,.2f, infrastructure costs = $%,.2f%n" 
            , t, federalRevenues, federalAssets, model.collector.getInfrastructureExpenses());
        //System.out.println("this: " + this);
    }
}

